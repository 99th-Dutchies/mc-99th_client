package net.minecraft.client.particle;

import com.google.common.base.Charsets;
import com.google.common.collect.EvictingQueue;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Queues;
import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.systems.RenderSystem;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import net.minecraft.block.Block;
import net.minecraft.block.BlockRenderType;
import net.minecraft.block.BlockState;
import net.minecraft.client.renderer.ActiveRenderInfo;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.IRenderTypeBuffer;
import net.minecraft.client.renderer.LightTexture;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.culling.ClippingHelper;
import net.minecraft.client.renderer.texture.AtlasTexture;
import net.minecraft.client.renderer.texture.MissingTextureSprite;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.crash.ReportedException;
import net.minecraft.entity.Entity;
import net.minecraft.fluid.FluidState;
import net.minecraft.particles.IParticleData;
import net.minecraft.particles.ParticleType;
import net.minecraft.particles.ParticleTypes;
import net.minecraft.profiler.IProfiler;
import net.minecraft.resources.IFutureReloadListener;
import net.minecraft.resources.IResource;
import net.minecraft.resources.IResourceManager;
import net.minecraft.tags.FluidTags;
import net.minecraft.util.Direction;
import net.minecraft.util.JSONUtils;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.BlockRayTraceResult;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.registry.Registry;
import net.optifine.Config;
import net.optifine.reflect.Reflector;

public class ParticleManager implements IFutureReloadListener {
   private static final List<IParticleRenderType> field_215241_b = ImmutableList.of(IParticleRenderType.field_217601_a, IParticleRenderType.field_217602_b, IParticleRenderType.field_217604_d, IParticleRenderType.field_217603_c, IParticleRenderType.field_217605_e);
   protected ClientWorld field_78878_a;
   private final Map<IParticleRenderType, Queue<Particle>> field_78876_b = Maps.newIdentityHashMap();
   private final Queue<EmitterParticle> field_178933_d = Queues.newArrayDeque();
   private final TextureManager field_78877_c;
   private final Random field_78875_d = new Random();
   private final Map<ResourceLocation, IParticleFactory<?>> field_178932_g = new HashMap<>();
   private final Queue<Particle> field_187241_h = Queues.newArrayDeque();
   private final Map<ResourceLocation, ParticleManager.AnimatedSpriteImpl> field_215242_i = Maps.newHashMap();
   private final AtlasTexture field_215243_j = new AtlasTexture(AtlasTexture.field_215262_g);

   public ParticleManager(ClientWorld p_i232413_1_, TextureManager p_i232413_2_) {
      p_i232413_2_.func_229263_a_(this.field_215243_j.func_229223_g_(), this.field_215243_j);
      this.field_78878_a = p_i232413_1_;
      this.field_78877_c = p_i232413_2_;
      this.func_178930_c();
   }

   private void func_178930_c() {
      this.func_215234_a(ParticleTypes.field_197608_a, SpellParticle.AmbientMobFactory::new);
      this.func_215234_a(ParticleTypes.field_197609_b, HeartParticle.AngryVillagerFactory::new);
      this.func_199283_a(ParticleTypes.field_197610_c, new BarrierParticle.Factory());
      this.func_199283_a(ParticleTypes.field_197611_d, new DiggingParticle.Factory());
      this.func_215234_a(ParticleTypes.field_197612_e, BubbleParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_203220_f, BubbleColumnUpParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_203217_T, BubblePopParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_218417_ae, CampfireParticle.CozySmokeFactory::new);
      this.func_215234_a(ParticleTypes.field_218418_af, CampfireParticle.SignalSmokeFactory::new);
      this.func_215234_a(ParticleTypes.field_197613_f, CloudParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_218420_D, SuspendedTownParticle.ComposterFactory::new);
      this.func_215234_a(ParticleTypes.field_197614_g, CritParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_203218_U, CurrentDownParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197615_h, CritParticle.DamageIndicatorFactory::new);
      this.func_215234_a(ParticleTypes.field_197616_i, DragonBreathParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_206864_X, SuspendedTownParticle.DolphinSpeedFactory::new);
      this.func_215234_a(ParticleTypes.field_197617_j, DripParticle.DrippingLavaFactory::new);
      this.func_215234_a(ParticleTypes.field_218423_k, DripParticle.FallingLavaFactory::new);
      this.func_215234_a(ParticleTypes.field_218424_l, DripParticle.LandingLavaFactory::new);
      this.func_215234_a(ParticleTypes.field_197618_k, DripParticle.DrippingWaterFactory::new);
      this.func_215234_a(ParticleTypes.field_218425_n, DripParticle.FallingWaterFactory::new);
      this.func_215234_a(ParticleTypes.field_197619_l, RedstoneParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197620_m, SpellParticle.Factory::new);
      this.func_199283_a(ParticleTypes.field_197621_n, new MobAppearanceParticle.Factory());
      this.func_215234_a(ParticleTypes.field_197622_o, CritParticle.MagicFactory::new);
      this.func_215234_a(ParticleTypes.field_197623_p, EnchantmentTableParticle.EnchantmentTable::new);
      this.func_215234_a(ParticleTypes.field_197624_q, EndRodParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197625_r, SpellParticle.MobFactory::new);
      this.func_199283_a(ParticleTypes.field_197626_s, new HugeExplosionParticle.Factory());
      this.func_215234_a(ParticleTypes.field_197627_t, LargeExplosionParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197628_u, FallingDustParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197629_v, FireworkParticle.SparkFactory::new);
      this.func_215234_a(ParticleTypes.field_197630_w, WaterWakeParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197631_x, FlameParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_239812_C_, SoulParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_239811_B_, FlameParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_218419_B, FireworkParticle.OverlayFactory::new);
      this.func_215234_a(ParticleTypes.field_197632_y, SuspendedTownParticle.HappyVillagerFactory::new);
      this.func_215234_a(ParticleTypes.field_197633_z, HeartParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197590_A, SpellParticle.InstantFactory::new);
      this.func_199283_a(ParticleTypes.field_197591_B, new BreakingParticle.Factory());
      this.func_199283_a(ParticleTypes.field_197592_C, new BreakingParticle.SlimeFactory());
      this.func_199283_a(ParticleTypes.field_197593_D, new BreakingParticle.SnowballFactory());
      this.func_215234_a(ParticleTypes.field_197594_E, LargeSmokeParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197595_F, LavaParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197596_G, SuspendedTownParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_205167_W, EnchantmentTableParticle.NautilusFactory::new);
      this.func_215234_a(ParticleTypes.field_197597_H, NoteParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197598_I, PoofParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197599_J, PortalParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197600_K, RainParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197601_L, SmokeParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_218421_R, CloudParticle.SneezeFactory::new);
      this.func_215234_a(ParticleTypes.field_197602_M, SpitParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197603_N, SweepAttackParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197604_O, TotemOfUndyingParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_203219_V, SquidInkParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197605_P, UnderwaterParticle.UnderwaterFactory::new);
      this.func_215234_a(ParticleTypes.field_218422_X, SplashParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_197607_R, SpellParticle.WitchFactory::new);
      this.func_215234_a(ParticleTypes.field_229427_ag_, DripParticle.DrippingHoneyFactory::new);
      this.func_215234_a(ParticleTypes.field_229428_ah_, DripParticle.FallingHoneyFactory::new);
      this.func_215234_a(ParticleTypes.field_229429_ai_, DripParticle.LandingHoneyFactory::new);
      this.func_215234_a(ParticleTypes.field_229430_aj_, DripParticle.FallingNectarFactory::new);
      this.func_215234_a(ParticleTypes.field_239813_am_, AshParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_239814_an_, UnderwaterParticle.CrimsonSporeFactory::new);
      this.func_215234_a(ParticleTypes.field_239815_ao_, UnderwaterParticle.WarpedSporeFactory::new);
      this.func_215234_a(ParticleTypes.field_239816_ap_, DripParticle.DrippingObsidianTearFactory::new);
      this.func_215234_a(ParticleTypes.field_239817_aq_, DripParticle.FallingObsidianTearFactory::new);
      this.func_215234_a(ParticleTypes.field_239818_ar_, DripParticle.LandingObsidianTearFactory::new);
      this.func_215234_a(ParticleTypes.field_239819_as_, ReversePortalParticle.Factory::new);
      this.func_215234_a(ParticleTypes.field_239820_at_, WhiteAshParticle.Factory::new);
   }

   private <T extends IParticleData> void func_199283_a(ParticleType<T> p_199283_1_, IParticleFactory<T> p_199283_2_) {
      this.field_178932_g.put(Registry.field_212632_u.func_177774_c(p_199283_1_), p_199283_2_);
   }

   private <T extends IParticleData> void func_215234_a(ParticleType<T> p_215234_1_, ParticleManager.IParticleMetaFactory<T> p_215234_2_) {
      ParticleManager.AnimatedSpriteImpl particlemanager$animatedspriteimpl = new ParticleManager.AnimatedSpriteImpl();
      this.field_215242_i.put(Registry.field_212632_u.func_177774_c(p_215234_1_), particlemanager$animatedspriteimpl);
      this.field_178932_g.put(Registry.field_212632_u.func_177774_c(p_215234_1_), p_215234_2_.create(particlemanager$animatedspriteimpl));
   }

   public CompletableFuture<Void> func_215226_a(IFutureReloadListener.IStage p_215226_1_, IResourceManager p_215226_2_, IProfiler p_215226_3_, IProfiler p_215226_4_, Executor p_215226_5_, Executor p_215226_6_) {
      Map<ResourceLocation, List<ResourceLocation>> map = Maps.newConcurrentMap();
      CompletableFuture<?>[] completablefuture = Registry.field_212632_u.func_148742_b().stream().map((p_lambda$reload$1_4_) -> {
         return CompletableFuture.runAsync(() -> {
            this.func_215236_a(p_215226_2_, p_lambda$reload$1_4_, map);
         }, p_215226_5_);
      }).toArray((p_lambda$reload$2_0_) -> {
         return new CompletableFuture[p_lambda$reload$2_0_];
      });
      return CompletableFuture.allOf(completablefuture).thenApplyAsync((p_lambda$reload$3_4_) -> {
         p_215226_3_.func_219894_a();
         p_215226_3_.func_76320_a("stitching");
         AtlasTexture.SheetData atlastexture$sheetdata = this.field_215243_j.func_229220_a_(p_215226_2_, map.values().stream().flatMap(Collection::stream), p_215226_3_, 0);
         p_215226_3_.func_76319_b();
         p_215226_3_.func_219897_b();
         return atlastexture$sheetdata;
      }, p_215226_5_).thenCompose(p_215226_1_::func_216872_a).thenAcceptAsync((p_lambda$reload$5_3_) -> {
         this.field_78876_b.clear();
         p_215226_4_.func_219894_a();
         p_215226_4_.func_76320_a("upload");
         this.field_215243_j.func_215260_a(p_lambda$reload$5_3_);
         p_215226_4_.func_219895_b("bindSpriteSets");
         TextureAtlasSprite textureatlassprite = this.field_215243_j.func_195424_a(MissingTextureSprite.func_195675_b());
         map.forEach((p_lambda$null$4_2_, p_lambda$null$4_3_) -> {
            ImmutableList<TextureAtlasSprite> immutablelist = p_lambda$null$4_3_.isEmpty() ? ImmutableList.of(textureatlassprite) : p_lambda$null$4_3_.stream().map(this.field_215243_j::func_195424_a).collect(ImmutableList.toImmutableList());
            this.field_215242_i.get(p_lambda$null$4_2_).func_217592_a(immutablelist);
         });
         p_215226_4_.func_76319_b();
         p_215226_4_.func_219897_b();
      }, p_215226_6_);
   }

   public void func_215232_a() {
      this.field_215243_j.func_195419_g();
   }

   private void func_215236_a(IResourceManager p_215236_1_, ResourceLocation p_215236_2_, Map<ResourceLocation, List<ResourceLocation>> p_215236_3_) {
      ResourceLocation resourcelocation = new ResourceLocation(p_215236_2_.func_110624_b(), "particles/" + p_215236_2_.func_110623_a() + ".json");

      try (
         IResource iresource = p_215236_1_.func_199002_a(resourcelocation);
         Reader reader = new InputStreamReader(iresource.func_199027_b(), Charsets.UTF_8);
      ) {
         TexturesParticle texturesparticle = TexturesParticle.func_217595_a(JSONUtils.func_212743_a(reader));
         List<ResourceLocation> list = texturesparticle.func_217596_a();
         boolean flag = this.field_215242_i.containsKey(p_215236_2_);
         if (list == null) {
            if (flag) {
               throw new IllegalStateException("Missing texture list for particle " + p_215236_2_);
            }
         } else {
            if (!flag) {
               throw new IllegalStateException("Redundant texture list for particle " + p_215236_2_);
            }

            p_215236_3_.put(p_215236_2_, list.stream().map((p_lambda$loadTextureLists$6_0_) -> {
               return new ResourceLocation(p_lambda$loadTextureLists$6_0_.func_110624_b(), "particle/" + p_lambda$loadTextureLists$6_0_.func_110623_a());
            }).collect(Collectors.toList()));
         }

      } catch (IOException ioexception1) {
         throw new IllegalStateException("Failed to load description for particle " + p_215236_2_, ioexception1);
      }
   }

   public void func_199282_a(Entity p_199282_1_, IParticleData p_199282_2_) {
      this.field_178933_d.add(new EmitterParticle(this.field_78878_a, p_199282_1_, p_199282_2_));
   }

   public void func_199281_a(Entity p_199281_1_, IParticleData p_199281_2_, int p_199281_3_) {
      this.field_178933_d.add(new EmitterParticle(this.field_78878_a, p_199281_1_, p_199281_2_, p_199281_3_));
   }

   @Nullable
   public Particle func_199280_a(IParticleData p_199280_1_, double p_199280_2_, double p_199280_4_, double p_199280_6_, double p_199280_8_, double p_199280_10_, double p_199280_12_) {
      Particle particle = this.func_199927_b(p_199280_1_, p_199280_2_, p_199280_4_, p_199280_6_, p_199280_8_, p_199280_10_, p_199280_12_);
      if (particle != null) {
         this.func_78873_a(particle);
         return particle;
      } else {
         return null;
      }
   }

   @Nullable
   private <T extends IParticleData> Particle func_199927_b(T p_199927_1_, double p_199927_2_, double p_199927_4_, double p_199927_6_, double p_199927_8_, double p_199927_10_, double p_199927_12_) {
      IParticleFactory<T> iparticlefactory = this.field_178932_g.get(Registry.field_212632_u.func_177774_c(p_199927_1_.func_197554_b()));
      return iparticlefactory == null ? null : iparticlefactory.func_199234_a(p_199927_1_, this.field_78878_a, p_199927_2_, p_199927_4_, p_199927_6_, p_199927_8_, p_199927_10_, p_199927_12_);
   }

   public void func_78873_a(Particle p_78873_1_) {
      if (p_78873_1_ != null) {
         if (!(p_78873_1_ instanceof FireworkParticle.Spark) || Config.isFireworkParticles()) {
            this.field_187241_h.add(p_78873_1_);
         }
      }
   }

   public void func_78868_a() {
      this.field_78876_b.forEach((p_lambda$tick$7_1_, p_lambda$tick$7_2_) -> {
         this.field_78878_a.func_217381_Z().func_76320_a(p_lambda$tick$7_1_.toString());
         this.func_187240_a(p_lambda$tick$7_2_);
         this.field_78878_a.func_217381_Z().func_76319_b();
      });
      if (!this.field_178933_d.isEmpty()) {
         List<EmitterParticle> list = Lists.newArrayList();

         for(EmitterParticle emitterparticle : this.field_178933_d) {
            emitterparticle.func_189213_a();
            if (!emitterparticle.func_187113_k()) {
               list.add(emitterparticle);
            }
         }

         this.field_178933_d.removeAll(list);
      }

      Particle particle;
      if (!this.field_187241_h.isEmpty()) {
         while((particle = this.field_187241_h.poll()) != null) {
            Queue<Particle> queue = this.field_78876_b.computeIfAbsent(particle.func_217558_b(), (p_lambda$tick$8_0_) -> {
               return EvictingQueue.create(16384);
            });
            if (!(particle instanceof BarrierParticle) || !this.reuseBarrierParticle(particle, queue)) {
               queue.add(particle);
            }
         }
      }

   }

   private void func_187240_a(Collection<Particle> p_187240_1_) {
      if (!p_187240_1_.isEmpty()) {
         long i = System.currentTimeMillis();
         int j = p_187240_1_.size();
         Iterator<Particle> iterator = p_187240_1_.iterator();

         while(iterator.hasNext()) {
            Particle particle = iterator.next();
            this.func_178923_d(particle);
            if (!particle.func_187113_k()) {
               iterator.remove();
            }

            --j;
            if (System.currentTimeMillis() > i + 20L) {
               break;
            }
         }

         if (j > 0) {
            int k = j;

            for(Iterator iterator1 = p_187240_1_.iterator(); iterator1.hasNext() && k > 0; --k) {
               Particle particle1 = (Particle)iterator1.next();
               particle1.func_187112_i();
               iterator1.remove();
            }
         }
      }

   }

   private void func_178923_d(Particle p_178923_1_) {
      try {
         p_178923_1_.func_189213_a();
      } catch (Throwable throwable) {
         CrashReport crashreport = CrashReport.func_85055_a(throwable, "Ticking Particle");
         CrashReportCategory crashreportcategory = crashreport.func_85058_a("Particle being ticked");
         crashreportcategory.func_189529_a("Particle", p_178923_1_::toString);
         crashreportcategory.func_189529_a("Particle Type", p_178923_1_.func_217558_b()::toString);
         throw new ReportedException(crashreport);
      }
   }

   public void func_228345_a_(MatrixStack p_228345_1_, IRenderTypeBuffer.Impl p_228345_2_, LightTexture p_228345_3_, ActiveRenderInfo p_228345_4_, float p_228345_5_) {
      this.renderParticles(p_228345_1_, p_228345_2_, p_228345_3_, p_228345_4_, p_228345_5_, (ClippingHelper)null);
   }

   public void renderParticles(MatrixStack p_renderParticles_1_, IRenderTypeBuffer.Impl p_renderParticles_2_, LightTexture p_renderParticles_3_, ActiveRenderInfo p_renderParticles_4_, float p_renderParticles_5_, ClippingHelper p_renderParticles_6_) {
      p_renderParticles_3_.func_205109_c();
      Runnable runnable = () -> {
         RenderSystem.enableAlphaTest();
         RenderSystem.defaultAlphaFunc();
         RenderSystem.enableDepthTest();
         RenderSystem.enableFog();
         if (Reflector.ForgeHooksClient.exists()) {
            RenderSystem.activeTexture(33986);
            RenderSystem.enableTexture();
            RenderSystem.activeTexture(33984);
         }

      };
      FluidState fluidstate = p_renderParticles_4_.func_216771_k();
      boolean flag = fluidstate.func_206884_a(FluidTags.field_206959_a);
      RenderSystem.pushMatrix();
      RenderSystem.multMatrix(p_renderParticles_1_.func_227866_c_().func_227870_a_());
      Collection<IParticleRenderType> collection = field_215241_b;
      if (Reflector.ForgeHooksClient.exists()) {
         collection = this.field_78876_b.keySet();
      }

      for(IParticleRenderType iparticlerendertype : collection) {
         if (iparticlerendertype != IParticleRenderType.field_217606_f) {
            runnable.run();
            Iterable<Particle> iterable = this.field_78876_b.get(iparticlerendertype);
            if (iterable != null) {
               RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
               Tessellator tessellator = Tessellator.func_178181_a();
               BufferBuilder bufferbuilder = tessellator.func_178180_c();
               iparticlerendertype.func_217600_a(bufferbuilder, this.field_78877_c);

               for(Particle particle : iterable) {
                  if (p_renderParticles_6_ == null || !particle.shouldCull() || p_renderParticles_6_.func_228957_a_(particle.func_187116_l())) {
                     try {
                        if (flag || !(particle instanceof UnderwaterParticle) || particle.field_187129_i != 0.0D || particle.field_187130_j != 0.0D || particle.field_187131_k != 0.0D) {
                           particle.func_225606_a_(bufferbuilder, p_renderParticles_4_, p_renderParticles_5_);
                        }
                     } catch (Throwable throwable) {
                        CrashReport crashreport = CrashReport.func_85055_a(throwable, "Rendering Particle");
                        CrashReportCategory crashreportcategory = crashreport.func_85058_a("Particle being rendered");
                        crashreportcategory.func_189529_a("Particle", particle::toString);
                        crashreportcategory.func_189529_a("Particle Type", iparticlerendertype::toString);
                        throw new ReportedException(crashreport);
                     }
                  }
               }

               iparticlerendertype.func_217599_a(tessellator);
            }
         }
      }

      RenderSystem.popMatrix();
      RenderSystem.depthMask(true);
      RenderSystem.depthFunc(515);
      RenderSystem.disableBlend();
      RenderSystem.defaultAlphaFunc();
      p_renderParticles_3_.func_205108_b();
      RenderSystem.disableFog();
      RenderSystem.enableDepthTest();
   }

   public void func_78870_a(@Nullable ClientWorld p_78870_1_) {
      this.field_78878_a = p_78870_1_;
      this.field_78876_b.clear();
      this.field_178933_d.clear();
   }

   public void func_180533_a(BlockPos p_180533_1_, BlockState p_180533_2_) {
      boolean flag;
      if (Reflector.IForgeBlockState_addDestroyEffects.exists() && Reflector.IForgeBlockState_isAir2.exists()) {
         Block block = p_180533_2_.func_177230_c();
         flag = !Reflector.callBoolean(p_180533_2_, Reflector.IForgeBlockState_isAir2, this.field_78878_a, p_180533_1_) && !Reflector.callBoolean(p_180533_2_, Reflector.IForgeBlockState_addDestroyEffects, this.field_78878_a, p_180533_1_, this);
      } else {
         flag = !p_180533_2_.func_196958_f();
      }

      if (flag) {
         VoxelShape voxelshape = p_180533_2_.func_196954_c(this.field_78878_a, p_180533_1_);
         double d0 = 0.25D;
         voxelshape.func_197755_b((p_lambda$addBlockDestroyEffects$10_3_, p_lambda$addBlockDestroyEffects$10_5_, p_lambda$addBlockDestroyEffects$10_7_, p_lambda$addBlockDestroyEffects$10_9_, p_lambda$addBlockDestroyEffects$10_11_, p_lambda$addBlockDestroyEffects$10_13_) -> {
            double d1 = Math.min(1.0D, p_lambda$addBlockDestroyEffects$10_9_ - p_lambda$addBlockDestroyEffects$10_3_);
            double d2 = Math.min(1.0D, p_lambda$addBlockDestroyEffects$10_11_ - p_lambda$addBlockDestroyEffects$10_5_);
            double d3 = Math.min(1.0D, p_lambda$addBlockDestroyEffects$10_13_ - p_lambda$addBlockDestroyEffects$10_7_);
            int i = Math.max(2, MathHelper.func_76143_f(d1 / 0.25D));
            int j = Math.max(2, MathHelper.func_76143_f(d2 / 0.25D));
            int k = Math.max(2, MathHelper.func_76143_f(d3 / 0.25D));

            for(int l = 0; l < i; ++l) {
               for(int i1 = 0; i1 < j; ++i1) {
                  for(int j1 = 0; j1 < k; ++j1) {
                     double d4 = ((double)l + 0.5D) / (double)i;
                     double d5 = ((double)i1 + 0.5D) / (double)j;
                     double d6 = ((double)j1 + 0.5D) / (double)k;
                     double d7 = d4 * d1 + p_lambda$addBlockDestroyEffects$10_3_;
                     double d8 = d5 * d2 + p_lambda$addBlockDestroyEffects$10_5_;
                     double d9 = d6 * d3 + p_lambda$addBlockDestroyEffects$10_7_;
                     this.func_78873_a((new DiggingParticle(this.field_78878_a, (double)p_180533_1_.func_177958_n() + d7, (double)p_180533_1_.func_177956_o() + d8, (double)p_180533_1_.func_177952_p() + d9, d4 - 0.5D, d5 - 0.5D, d6 - 0.5D, p_180533_2_)).func_174846_a(p_180533_1_));
                  }
               }
            }

         });
      }

   }

   public void func_180532_a(BlockPos p_180532_1_, Direction p_180532_2_) {
      BlockState blockstate = this.field_78878_a.func_180495_p(p_180532_1_);
      if (blockstate.func_185901_i() != BlockRenderType.INVISIBLE) {
         int i = p_180532_1_.func_177958_n();
         int j = p_180532_1_.func_177956_o();
         int k = p_180532_1_.func_177952_p();
         float f = 0.1F;
         AxisAlignedBB axisalignedbb = blockstate.func_196954_c(this.field_78878_a, p_180532_1_).func_197752_a();
         double d0 = (double)i + this.field_78875_d.nextDouble() * (axisalignedbb.field_72336_d - axisalignedbb.field_72340_a - (double)0.2F) + (double)0.1F + axisalignedbb.field_72340_a;
         double d1 = (double)j + this.field_78875_d.nextDouble() * (axisalignedbb.field_72337_e - axisalignedbb.field_72338_b - (double)0.2F) + (double)0.1F + axisalignedbb.field_72338_b;
         double d2 = (double)k + this.field_78875_d.nextDouble() * (axisalignedbb.field_72334_f - axisalignedbb.field_72339_c - (double)0.2F) + (double)0.1F + axisalignedbb.field_72339_c;
         if (p_180532_2_ == Direction.DOWN) {
            d1 = (double)j + axisalignedbb.field_72338_b - (double)0.1F;
         }

         if (p_180532_2_ == Direction.UP) {
            d1 = (double)j + axisalignedbb.field_72337_e + (double)0.1F;
         }

         if (p_180532_2_ == Direction.NORTH) {
            d2 = (double)k + axisalignedbb.field_72339_c - (double)0.1F;
         }

         if (p_180532_2_ == Direction.SOUTH) {
            d2 = (double)k + axisalignedbb.field_72334_f + (double)0.1F;
         }

         if (p_180532_2_ == Direction.WEST) {
            d0 = (double)i + axisalignedbb.field_72340_a - (double)0.1F;
         }

         if (p_180532_2_ == Direction.EAST) {
            d0 = (double)i + axisalignedbb.field_72336_d + (double)0.1F;
         }

         this.func_78873_a((new DiggingParticle(this.field_78878_a, d0, d1, d2, 0.0D, 0.0D, 0.0D, blockstate)).func_174846_a(p_180532_1_).func_70543_e(0.2F).func_70541_f(0.6F));
      }

   }

   public String func_78869_b() {
      return String.valueOf(this.field_78876_b.values().stream().mapToInt(Collection::size).sum());
   }

   private boolean reuseBarrierParticle(Particle p_reuseBarrierParticle_1_, Queue<Particle> p_reuseBarrierParticle_2_) {
      for(Particle particle : p_reuseBarrierParticle_2_) {
         if (particle instanceof BarrierParticle && p_reuseBarrierParticle_1_.field_187123_c == particle.field_187123_c && p_reuseBarrierParticle_1_.field_187124_d == particle.field_187124_d && p_reuseBarrierParticle_1_.field_187125_e == particle.field_187125_e) {
            particle.field_70546_d = 0;
            return true;
         }
      }

      return false;
   }

   public void addBlockHitEffects(BlockPos p_addBlockHitEffects_1_, BlockRayTraceResult p_addBlockHitEffects_2_) {
      BlockState blockstate = this.field_78878_a.func_180495_p(p_addBlockHitEffects_1_);
      if (blockstate != null) {
         boolean flag = Reflector.callBoolean(blockstate, Reflector.IForgeBlockState_addHitEffects, this.field_78878_a, p_addBlockHitEffects_2_, this);
         if (!flag) {
            Direction direction = p_addBlockHitEffects_2_.func_216354_b();
            this.func_180532_a(p_addBlockHitEffects_1_, direction);
         }

      }
   }

   class AnimatedSpriteImpl implements IAnimatedSprite {
      private List<TextureAtlasSprite> field_217594_b;

      private AnimatedSpriteImpl() {
      }

      public TextureAtlasSprite func_217591_a(int p_217591_1_, int p_217591_2_) {
         return this.field_217594_b.get(p_217591_1_ * (this.field_217594_b.size() - 1) / p_217591_2_);
      }

      public TextureAtlasSprite func_217590_a(Random p_217590_1_) {
         return this.field_217594_b.get(p_217590_1_.nextInt(this.field_217594_b.size()));
      }

      public void func_217592_a(List<TextureAtlasSprite> p_217592_1_) {
         this.field_217594_b = ImmutableList.copyOf(p_217592_1_);
      }
   }

   @FunctionalInterface
   interface IParticleMetaFactory<T extends IParticleData> {
      IParticleFactory<T> create(IAnimatedSprite p_create_1_);
   }
}
